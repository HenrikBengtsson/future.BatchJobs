% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/Future.R
\name{future}
\alias{future}
\alias{isResolved}
\title{Evaluates an expression asynchroneously}
\usage{
future(expr, envir = parent.frame(), substitute = TRUE, ...,
  evaluator = getOption("future", async))
}
\arguments{
\item{expr}{An R \link[base]{expression}.}

\item{envir}{The \link{environment} from where global
objects should be identified.  Depending on "evaluator",
it may also be the environment in which the expression
is evaluated.}

\item{substitute}{If TRUE, argument \code{expr} is
\code{\link[base]{substitute}()}:ed, otherwise not.}

\item{...}{Additional arguments passed to the "evaluator".}

\item{evalutator}{The actual function that evaluates
\code{expr} and returns a future.  The evaluator function
should accept argument \code{substitute=FALSE}.}
}
\value{
A \link{Future}.
}
\description{
Asynchroneously evaluates an R expression and returns a future,
which the can be inspected for being resolved or not and when
resolved can have its value retrieved.
Ideally the evaluator used is \emph{non-blocking} (returns
immediately), but it is not required.
}
\examples{
f <- future({
  Sys.sleep(3)
  42L
})

print(f)
print(isResolved(f))
y <- value(f)
print(y)
}

